{
  "name": "Arguments",
  "tagline": "总结函数中的arguments对象",
  "body": "#总结js函数中的arguments对象\r\n\r\n1.arguments对象不能显式创建，arguments对象只有函数开始时才可用，而且arguments是js中的保留字。不要占用这个名字\r\n\r\n2.函数的 arguments 对象并不是一个数组\r\n\r\n```\r\nfunction test(a,b){\r\n  console.log(arguments instanceof Array);   \r\n}\r\n\r\ntest(\"hahh\",\"hehe\") //false\r\n\r\n```\r\n\r\n3.访问单个参数的方式与访问数组元素的方式相同。索引 n 实际上是 arguments 对象的 0…n 属性的其中一个参数。\r\n\r\n```\r\nfunction test(a,b){\r\n  console.log(arguments[0]);\r\n}\r\n\r\ntest(\"hahh\",\"hehe\")   // \"hahh\"\r\n\r\n```\r\n\r\n3.通过 arguments 属性(相对于Function来说)，函数可以处理可变数量的参数。arguments 对象的 length 属性包含了传递给函数的参数的数目。对于arguments 对象所包含的单个参数，其访问方法与数组中所包含的参数的访问方法相同。\r\n\r\n```\r\nfunction test(a,b){\r\n  console.log(arguments.length);\r\n}\r\n\r\ntest(\"hahh\",\"hehe\")   // 2\r\n\r\n```\r\n\r\n4.说明一下arguments与真正传的形式参数是一致的：比如，你给函数传了一个叫param的参数，并且只有这一个参数，那么param与arguments[0]都是对这个参数值的引用\r\n\r\n```\r\nfunction test(a,b){\r\n  arguments[0] = \"我改变了\";\r\n  console.log(a);\r\n}\r\n\r\ntest(\"hahh\",\"hehe\")   // \"我改变了\"\r\n\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}